(ns tst.core
  (:use compojure.core
        [clojure.contrib.java-utils]
        ;; for view
        [hiccup.core :only [html]]
        [hiccup.page :only [html5 include-css include-js]]
        [clojure.tools.logging :only [info debug warn error]]
        [clojure.tools.nrepl.server :as nrepl])
  (:require [org.httpkit.server :as server]
            [clojure.tools.nrepl.server :as nrepl]
            [cemerick.shoreleave.rpc :refer (defremote) :as rpc]
            [ring.middleware.reload :as reload]
            [compojure.handler :as handler]
            [monger.core :as mg]
            [monger.collection :as mc]
            [monger.operators :as mo]
            [compojure.route :as route])
  (:import (javax.mail Session Folder Flags)
           (javax.mail.search FlagTerm)
           (javax.mail Flags$Flag)))

;; state
(defonce prod? (atom (System/getenv "LEIN_NO_DEV")))
(defonce counter (atom 0))

(defn connect-mongo! [uri]
  (info "Connecting to mongo via" uri)
  (mg/connect-via-uri! uri))


(defn store [protocol srv user pass]
  (let [p (as-properties [["mail.store.protocol" protocol]])]
    (doto (.getStore (Session/getDefaultInstance p) protocol)
      (.connect srv user pass))))

(def gmail (store "imaps" "imap.gmail.com" 
                  "adamja1@gmail.com" "mywctfvoyxqskrmx"))

(defn folders 
  ([s] (folders s (.getDefaultFolder s)))
  ([s f]
     (let [sub? #(if (= 0 (bit-and (.getType %) 
                                   Folder/HOLDS_FOLDERS)) false true)]
       (map #(cons (.getName %) (if (sub? %) (folders s %))) (.list f)))))

(defn messages [s fd & opt]
  (let [fd (doto (.getFolder s fd) (.open Folder/READ_ONLY))
        [flags set] opt
        msgs (if opt 
               (.search fd (FlagTerm. (Flags. flags) set)) 
               (.getMessages fd))]
    (map #(vector (.getUID fd %) %) msgs)))

(defn getFrom [message](javax.mail.internet.InternetAddress/toString (.getFrom message)))
(defn getReplyTo [message] (javax.mail.internet.InternetAddress/toString (.getReplyTo message)) )
(defn getSubject [message] (.getSubject message))

;(defn dump [msgs]
;  (doseq [[uid msg] msgs]
;    (.writeTo msg (java.io.FileOutputStream. (str uid)))))

;;(dump (take 3 (messages gmail "INBOX")))
;print out the body of the message
;(do (println (for [m messages] (read-lines(.getInputStream m)) )))



;; templates
(defn index []
  (html
    [:head
     [:title "Simple Clojure Webapp Example"]
     (include-css "//netdna.bootstrapcdn.com/twitter-bootstrap/2.2.1/css/bootstrap-combined.min.css"
                  "/css/styles.css")]
    [:body
     [:div.container
      [:div.content [:span#counter @counter]]
      [:button.btn "click me"]]
     (include-js "//ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js")
     (include-js "//netdna.bootstrapcdn.com/twitter-bootstrap/2.3.1/js/bootstrap.min.js")
     (include-js "/js/cljs.js")
     ]))

;; handler

; remotes
(defremote inc-counter []
  (let
      [ {v :value}
        (mc/find-and-modify
         "counters"
         {:id 1}
         {mo/$inc {:value 1}}
         :upsert true
         :return-new true)]
    v
    )
)



; routes
(defroutes app-routes
  (GET "/" [] (index))
  (route/resources "/")
  (route/not-found "Not Found"))

(def all-routes (rpc/wrap-rpc app-routes))

(def app
  (if @prod?
    (handler/site all-routes)
    (reload/wrap-reload (handler/site all-routes))))




;; 
(defn start-nrepl-server [port]
  (info "Starting nrepl server on port" port)
  (defonce server (nrepl/start-server :port port)))

(defn start-app [port]
  (info "Starting server on port" port)
  (server/run-server app {:port port :join? false}))

(defn -main [& args]
  (when-not @prod? (start-nrepl-server 7888))
  (connect-mongo! "mongodb://localhost:27017/simpleweb")
  (let [port (Integer/parseInt (or (System/getenv "PORT") "3000"))]
    (start-app port)))
