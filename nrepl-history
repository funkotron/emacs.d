;; -*- coding: utf-8-unix -*-
;; Automatically written history of nREPL session
;; Edit at your own risk

("(row-row (bmp 120) (comp C sharp major))" "(row-row (overtone/bmp 120) (comp C sharp major))" "(row-row 120 (comp C sharp major))" "(row-row (bmp 120) (comp C sharp major))" "(puck 0.3 1.1 1.1)" "(puck 0.3 1.1 1)" "(puck 0.3 1.1 3.1)" "(puck 0.3 1.0 3.1)" "(puck 0.3 1.0 3)" "(play-note :leader C4)" "(play-note :leader c4)" "(play ska)" "(ns whelmed.songs.SKA)" "(row-row (bmp 120) (comp C sharp major))" "(ns music.core)" "(demo (snare-drum))" "(demo snare-drum)" "(connect-external-server)" "(stop)" "(bbeat)" "(kick-drum)" "(snare-drum)" "(drums 120 120)" "(drums 120)" "(drums)" "(kick-drum )" "(stop)" "(bbeat 0.2 440 3)" "(ns music.core)" "(exit)" "(demo (sin-osc))" "(use 'overtone.live)" "(demo (sin-osc))" "(bbeat 0.2 440 3)" "(ns music.core)" "(clear)" "(print \"hi\")" "(execute_step (load_program \"<\"))" "(execute_step (load_program \">\"))" "(execute_step (load_program \"+\"))" "initial_state" "(initial_state)" "(ns brainfuck.core)" "(load_program [\"hello\"])" "(load_program)" "(ns brainfuck.core)" "(take 5 (vec (repeat 0)))
            " "(start)" "(use 'dev)" "(stop)" "(start)" "(stop)" "(start)" "(use 'dev)" "(exit)" "(def t (tutorial-client-templates))" "(ns tutorial-client.html-templates)" "(def t (tutorial-client-templates))" "(ns tutorial-client.html-templates)" "(start)" "(use 'dev)" "(invoke-now #(imga))" "(print \"hello\")" "(def my-img (invoke-now #(imga)))" "(let [img (state :img)] 
    (dorun  (map #(image img (mod (* 15 %) (width)) (mod (* 20 %) (height) )) (range 1000))))" "
    (dorun  (map #(image img (mod (* 15 %) (width)) (mod (* 20 %) (height) )) (range 1000)))" "(ns tshirt.core)" "
    (dorun  (map #(image img (mod (* 15 %) (width)) (mod (* 20 %) (height) )) (range 1000)))" "(get-message)" "(mc/find-maps \"messages\")" "(send-message \"test\")" "(mc/send-message \"test\")" "(mc/remove \"messages\")" "(mc/find-maps \"messages\")" "(get-message)" "(mc/find-one-as-map \"messages\" {:id 1})" "get-message" "(get-message)" "(mc/find-maps \"messages\")" "(ns simpleweb.server)" "(use simpleweb.server)" "(load \"core\")" "(ns simpleweb.core)" "(use simpleweb.core)" "(use 'simpleweb.core)" "(use 'simplesocial.core)" "(use 'simpleweb.core)" "(use simpleweb.core)" "(user simpleweb.core)" "(clojure.tools.trace/dotrace [dl-mail clojure-mail.message/message-body clojure-mail.message/read-message] (dl-mail))" "(clojure.tools.trace/dotrace [dl-mail ] (dl-mail))" "(clojure.tools.trace/dotrace [dl-mail] (dl-mail))" "(clojure.tools.trace/dotrace [dl-mail])" "(require 'clojure.tools.trace)" "(use 'tst.core)" "(clojure.tools.trace/dotrace [dl-mail] (dl-mail))" "(clojure.tools.trace/dotrace [dl-mail])" "(clojure.tools.trace/dotrace [dl-mail] (dl-mail))" "(clojure.tools.trace/dotrace 'dl-mail)" "(clojure.tools.trace/dotrace dl-mail)" "(dotrace dl-mail)" "(require 'clojure.tools.trace)" "(dl-mail)" "inc-counter" "inc 'counter" "(use 'tst.core)" "(use tst.core)" "(refresh)" "(use '[clojure.tools.namespace.repl :only (refresh)])" "(refresh)" "(dl-mail)" "(use '[clojure.tools.namespace.repl :only (refresh)])" "(use '[clojure.tools.namespace.repl :only (refresh)])Â " "(dl-mail)" "(ns tst.core)" "(ns 'tst.core)" "(dl-mail)" "(ns tst.core)" "(dl-mail)" "(ns tst.core)" "(exit)" "exit" "(dl-mail)" "(ns tst.core)" "(dl-mail)" "(ns tst.core)" "(dl-mail)" "(print f)" "(def ta {:hi \"HI\"})" "(dl-mail)" "(ns tst.core)")